May 4
=====

  Fixed few more rotations problems... It works not bad with up to 15 random  numbers: This is where either 
         - the drawing dispear to the left   
                     or
         - Some nodes still end up with a child difference of 2 or more...
  But in general, it is way better than it used to be, and I'm close to something robust...
  

To DO:

* When using random values, The graphs are not draw at the same place (not minor difference, but it can jump from one really centered,
  to one right on the left side of the screen, etc) 

  

Arpril 27
=========

Started the AVL rotations in the TreeGraph class.
The Left Left is started.. Problem of too much recursion dough...

Arpril 22
=========

  Tried to find an alternative to the existing rendering algo, based on the size of left and right subtree at a node.
  It required to alter the Node class, and add an x and y field, which is not good design.
  But it is a promising path...

  the TreeGraphRender.js, in the method draw() as a temporary drawing of the new algo, to give an idea 
   --> It should be recoded to be cleaner and part of the class (not a patch at the end of the draw method like it is)
   
   Read the article here:    https://rachel53461.wordpress.com/2014/04/20/algorithm-for-drawing-trees/,
   as it has a more evoluated version
   

April 21
========

  Did merge the coding to have the line of the tree graph (done on Thursday) and the re centering of the canvas (Done on Friday)
  Some adjustement on the width of the tree been done, as it is sometime becoming too wide...

  To Do:
    Moving methods:

    Folling method should be done in the TreeGraph
        * Tree:: getChildLevel(level) *** Update: Removed April 22
        * find(value:int)       --> A node should only care about its value, and not try to search in its children    *** Update: Done April 22
          
        * getChildLevel(level)  --> It been commented out in Node, as it depends on the node.getDepth, which I removed     
                                    A better approach would be to have this method at the tree graph, give a node or value as       
                                    param, and the TreeGraph would did into the childre till it find or not the node/value
                                    If it does, then it should return the value (int) of the level where the node is
                                    i.e:  For a tree      a -->  b  -->   c  (It is more list here), 
                                          if we give 'c' , then it should return 3 (Third level)
                                          


  TreeGraph    (Has Data)
      --> TreeRender    (Has general job of planning and big level drawing)
         --> TreeRenderingAlgo  (Receive Data, general parameter on size of canvas, and return a tree with exact coords where to draw nodes)