
"use strict";
import { Graph }      from './model/Graph.js';
import { GraphRender}   from './view/GraphRender.js';


const MAX_NODE_NUMBER = 15;
const MAX_NODE_VALUE  = 50;
const MAX_EDGE_NUMBER  = 3;


let graph;

export const init = () => {

   

    //const nbrNodes = Math.round( Math.random() * MAX_NODE_NUMBER ) + 5;
    const nbrNodes = 5;
    

    

    graph = new Graph(nbrNodes);

    console.log("Init callled total nodes number is " + nbrNodes);

    for (let i=0;i<nbrNodes;i++) {

        const nodeValue = Math.round( Math.random() * MAX_NODE_VALUE ) + 1;
        //const nbrEdges = Math.round( Math.random() * MAX_EDGE_NUMBER ) + 1;


        const edges = getRandomEdgeIndexes(i,nbrNodes);


        edges.forEach(index => {
            graph.addEdge(i, index);
        });

        graph.setNodeValue(i,nodeValue);


        //console.log(i + " value is " + " nodeValue, edges --> " + graph.getEdgesForNode(i));

    }


    // Driver Code
    // graph = new Graph(4);
  
    // graph.addEdge(3, 3);
    // graph.addEdge(0, 1);
    // graph.addEdge(0, 2);
    // graph.addEdge(1, 2);
    // graph.addEdge(2, 0);
    // graph.addEdge(2, 3);
   

    // // graph.setNodeValue(0,3);
    // // graph.setNodeValue(1,6);
    // // graph.setNodeValue(2,9);
    // // graph.setNodeValue(3,1);
    // graph.setNodeValue(0,0);
    // graph.setNodeValue(1,1);
    // graph.setNodeValue(2,2);
    // graph.setNodeValue(3,3);

 
   // console.log("Graph has a size of " + graph.size());
 

     console.log("Following is Depth First Traversal (starting from vertex 2  value is " + graph.getNodeValue(2) + ")");
     graph.DFS(2);

    //  console.log(0 + " --> " + graph.getEdgesForNode(0));
    //  console.log(1 + " --> " + graph.getEdgesForNode(1));
    //  console.log(2 + " --> " + graph.getEdgesForNode(2));


}



export const render = () => {

    console.log("Render called...");
    var canvas = document.getElementById("graph-canvas");
    canvas.width = window.innerWidth - 60;



    let render = new GraphRender(canvas,graph);
    render.draw();


}

const displayWarningMessage = (msg) => {


    const errorWarningSection  = document.getElementById("warning-section");
    const errorWarningMsg  = document.getElementById("error-warning-msg");


    errorWarningSection.style = "visibility: visible;"
    errorWarningMsg.innerHTML = "Daniel"
}


export const dfsButtonClickHandler  = () => {

    


    const nodeInput = document.getElementById("NodeToWorkOn");
 //   const errorWarningMsg  = document.getElementById("error-warning-msg");

    const value = nodeInput.value;


    console.log("dfsButtonClickHandler " + value);


    displayWarningMessage("Dan");


  //  errorWarningMsg.innerHTML = "Daniel"


    

}

export const updateGraphDetailSection  = () => {
    console.log("updateGraphDetailSection");

    

    const nbrNodes =  graph.size();
    console.log("updateGraphDetailSection callled total nodes number is " + nbrNodes);

    for (let i=0;i<nbrNodes;i++) {

        const nodeValue = Math.round( Math.random() * MAX_NODE_VALUE ) + 1;
        //const nbrEdges = Math.round( Math.random() * MAX_EDGE_NUMBER ) + 1;


    
        console.log(i + " value is " + " nodeValue, edges --> " + graph.getEdgesForNode(i));

    }

    document.getElementById("NodeTotalCount").innerHTML = nbrNodes;

    

}

const getRandomEdgeIndexes = (currentIndex,nbrNodes) => {

    const nbrEdges = Math.round( Math.random() * MAX_EDGE_NUMBER ) + 1;
    const indexes = [];


    for (let j=0;j<nbrEdges; ) {

        const otherNodeIndex = Math.round( Math.random() * (nbrNodes-1) );

        if ( !indexes.includes(otherNodeIndex) && otherNodeIndex !== currentIndex ){
            
            indexes.push(otherNodeIndex);
            j++;

            
        // } else {
        //     console.log("Duplicate index in random");
        }


    }

    return indexes;
}



